---
# This playbook is based on Ansible 2.1, which is the initial version to
# include modules for networking device, of which IOS is suppoted as a set of modules.
# https://docs.ansible.com/ansible/list_of_network_modules.html
# Note: Try to stay consistent with indenting, here two-space indenting is used.

# In this playbook, we'll introduce:
#   - combining preliminary facts from preivious examples in to a single data
#     structure.
#   - using the 'local_action' to save data to a local file.
#   - How Ansible is 'idempotent'.  If you run this playbook multiple times,
#     you will notice a 'change' for each host on the 1st run as a file is
#     created.  Subsequent runs will show no changes if the file is the same
#     for a given host.
#
#  (Credit to 'privateip' https://github.com/privateip/Ansible-Webinar-Mar2016
#   for regex examples.)

# If you are unfamiliar with regex, you should really take some time to review:
#   http://www.tutorialspoint.com/python/python_reg_expressions.htm
# Or take a freely available Pythn course that introduces regex, like
# https://www.coursera.org/specializations/python

  - hosts: my_switches
    gather_facts: no
    connection: local

    vars:
      # Initialize an empty list 'sys_info' for storing combined data
      sys_info: []
      connect_settings:
        username: cisco
        password: cisco
        authorize: yes
        auth_pass: cisco
        transport: cli

    tasks:
      # -------------------------------------------------------------
      # Run multiple commands with 'ios_command' in a single task, then show
      # how to access some specific data.
      - name: run 'show version/interface/inventory'
        ios_command:
          host: "{{ inventory_hostname }}"
          commands:
            - show version
          provider: "{{ connect_settings }}"
        register: show_ver
      # -------------------------------------------------------------

      # Uncomment to see entire contects of 'show_ver' registered variable...
      #- name: dump 'show_ver'
      #  debug: var=show_ver

      # -------------------------------------------------------------
      - name: dump the 1st line of "show version" using bracket notation
        debug: var=show_ver["stdout_lines"][0][0]

      - name: set 'version' fact
        #set_fact: version="{{ show_ver.stdout[0] | regex_search( '[Vv]ersion\s+([a-zA-Z0-9_\.\(\)]+)', '\1' ) }}"
        set_fact: version="{{ show_ver.stdout[0] | regex_search( '[Vv]ersion\s+([\w\.\(\)]+)', '\1' ) }}"

      - name: dump 'version' fact
        debug: msg="Host {{ inventory_hostname }} is running IOS {{ version[0] }}"

      - name: set 'models' fact
        set_fact: models="{{ show_ver.stdout[0] | regex_findall('Model [Nn]umber\s*\:\s*(WS\S+)\s*[Ss]ystem [Ss]erial [Nn]umber\s*\:\s*(\S+)') }}"

      - name: dump 'models' list
        debug: var=models
      # -------------------------------------------------------------


      # -------------------------------------------------------------
      # Combine facts as a dictionary into an existing list 'sys_info' which is
      # initialized in the 'vars:' section as an empty list [].  Remember, this
      # fact 'sys_info' like any other is specific to the current host.
      # (It would be interestingto add all 'hosts' to the same list that is persistent.)
      - name: combine facts
        set_fact:
          sys_info: "{{ sys_info + [ {'host': inventory_hostname, 'version': version, 'model': models } ] }}"

      - name: dump sys_info
        debug: var=sys_info
      # -------------------------------------------------------------

      # -------------------------------------------------------------
      # Save 'sys_info' to a file in indented json with 'to_nice_json' filter:
      #   http://docs.ansible.com/ansible/playbooks_filters.html#filters-for-formatting-data
      # Here a combination of 'local_action' and the 'copy' module are used:
      #   http://docs.ansible.com/ansible/playbooks_delegation.html#delegation
      #   http://docs.ansible.com/ansible/copy_module.html
      - name: use local_action to save facts to local file
        local_action: copy content={{ sys_info | to_nice_json }} dest="./facts/{{ inventory_hostname }}.json"
      # This assumes the './facts/' directory exists.  We could have asked
      # Ansible to create the './facts/' for us, but I didn't want to do that
      # automagically and leave you wondering how that happened :)
      # See example 'create a directory' here:
      #    http://docs.ansible.com/ansible/file_module.html
      #
      # Here is an example of one of the files that is saved and formated by
      # the 'to_nice_json' filter.
      # [
      #     {
      #         "host": "3850switch.mydomain.com",
      #         "model": [
      #             [
      #                 "WS-C3850-48U",
      #                 "NWK1927X1GH"
      #             ],
      #             [
      #                 "WS-C3850-48U",
      #                 "QTW1927C1LP"
      #             ],
      #             [
      #                 "WS-C3850-48U",
      #                 "QTP1927X1FE"
      #             ],
      #             [
      #                 "WS-C3850-48U",
      #                 "QTP1927U1MA"
      #             ],
      #             [
      #                 "WS-C3850-48U",
      #                 "QTW1927D1HN"
      #             ],
      #             [
      #                 "WS-C3850-48U",
      #                 "QTW1927C1RZ"
      #             ]
      #         ],
      #         "version": "Version 03.06.00E"
      #     }
      # ]
      # -------------------------------------------------------------
