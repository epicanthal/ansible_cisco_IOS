---
# This playbook is based on Ansible 2.1, which is the initial version to
# include modules for networking device, of which IOS is suppoted as a set of modules.
# https://docs.ansible.com/ansible/list_of_network_modules.html
# Note: Try to stay consistent with indenting, here two-space indenting is used.

    # -------------------------------------------------------------
    # List the Cisco devices this playbook will run against.  First, just
    # try a single IP address.  Later you can try more hosts or groups.
  - hosts: 192.168.1.9       # put ip address or name here
    # See http://docs.ansible.com/ansible/playbooks_intro.html under "Basics".
    # Any host or group you list here must be defined/listed in your ansible 'hosts'
    # file.  See http://docs.ansible.com/ansible/intro_inventory.html for location
    # and formatting of the ansible 'hosts' file.
    # Note:  This is a list, so the '-' before 'hosts:' is requied, else an
    # error will be thrown.
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    # Ansible can't gather facts on systems that can't run Pyton
    # (i.e. there's no shell).
    # A nice explanation here in the "Why Ansible?" section:
    #     https://networklore.com/ansible-snmp-facts/
    # Cisco IOS switches/routers like most other
    # networking devices fall into this category.
    # http://docs.ansible.com/ansible/playbooks_variables.html#turning-off-facts
    # http://docs.ansible.com/ansible/snmp_facts_module.html
    gather_facts: no
    # As of my writing this, it appears that an "ios_facts" module will
    # be added to Ansible 2.2 (https://docs.ansible.com/ansible/ios_facts_module.html)
    # but that should be run as a task and 'gather_facts' should still be
    # set to 'no'.
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    # Ansible cannot run python scripts directly on Cisco IOS devices, so
    # set 'ansible_connection' to 'local' to force all Ansible scripts/modules
    # to run on the Ansible server (the control machine) itself rather than
    # on the remote IOS device.
    # A nice explanation here in the "Why Ansible?" section:
    #     https://networklore.com/ansible-snmp-facts/
    connection: local
    # Note:  This cannot be set in the 'provider' or 'task' level.  'provider'
    #        explained further below.
    # -------------------------------------------------------------

    # Define some necessary variables for the playbooks
    vars:
    # -------------------------------------------------------------
    # This is a 'provider' that will be referenced by each task, e.g 'ios_command'
    # tasks.
    # https://docs.ansible.com/ansible/intro_networking.html#connecting-to-networking-devices
    # https://docs.ansible.com/ansible/ios_command_module.html
      connect_settings:
        username: cisco
        password: cisco
        authorize: yes
        auth_pass: cisco
        transport: cli
    # Its helpful to define a 'provider' else you would have to repeat username,
    # password, etc. within each task.
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    # Each task is a list item (denoted by the '-').  A 'name' is optional but
    # recommended as the text you place will be displayed as each task is run.
    tasks:
    # Each task is based on a module, e.g. 'ios_command' or 'debug'.
    # -------------------------------------------------------------

      # -------------------------------------------------------------
      # A basic 'ios_command' task similar to the examples shown in:
      # https://docs.ansible.com/ansible/ios_command_module.html
      - name: run 'show clock'
        ios_command:    # The module name
          # Here we can use the 'inventory_hostname' variable instead of hard-
          # coding an IP address for the host.
          # http://docs.ansible.com/ansible/playbooks_variables.html#magic-variables-and-how-to-access-information-about-other-hosts
          host: "{{ inventory_hostname }}"
          # List of commands to run.  For now we'll just do a single command, but
          # later we'll do an example with more than one.
          commands:
            - show clock
          # Here's the 'provider' mentioned earlier.
          provider: "{{ connect_settings }}"
        # Here we will 'register' (i.e. save) what is the result of issuing the
        # 'show version' command into a variable 'show_ver'.  This will allow
        # the information to parsed for later use.
        # http://docs.ansible.com/ansible/playbooks_conditionals.html#register-variables
        # http://serverfault.com/questions/537060/how-to-see-stdout-of-ansible-commands
        register: show_clock
      # -------------------------------------------------------------

      # -------------------------------------------------------------
      # Let's do some more tasks using the 'debug' module
      # http://docs.ansible.com/ansible/debug_module.html
      #
      # Comment-out each task as you like to limit screen clutter.
      #
      # A simple example of dumping info to the screen as the playbook runs
      - name: print the current host
        debug: var=inventory_hostname

      # Same as above, just using the 'msg' form of the 'debug' module
      - name: Again, print the current host
        debug: msg="The current host is {{ inventory_hostname }}"

      # Now dump the contents of the 'show_clock' variable.  Notice its
      # structure is just nested dictionaries and lists.  If you don't recognize
      # the structure or have an idea how to reference subsets of the data,
      # go back and study Python lists and dictionaries and JSON.
      - name: dump 'show_clock' registered variable
        debug: var=show_clock

      # Accessing specific data...
      # http://docs.ansible.com/ansible/playbooks_variables.html#accessing-complex-variable-data
      - name: dump a subset of the data using bracket notation
        debug: var=show_clock["stdout"][0]

      - name: dump a subset of the data using dot notation
        debug: var=show_clock.stdout.0

      - name: And just to be redundant
        debug: msg="The date and time of {{ inventory_hostname }} is {{ show_clock.stdout.0 }}"

      # -------------------------------------------------------------
