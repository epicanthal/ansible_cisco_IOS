---
# This playbook is based on Ansible 2.1, which is the initial version to
# include modules for networking device, of which IOS is suppoted as a set of modules.
# https://docs.ansible.com/ansible/list_of_network_modules.html
# Note: Try to stay consistent with indenting, here two-space indenting is used.

# In this playbook, we'll introduce:
#   - using regular expressions (regex) in combination with the
#     'set_fact' module to glean some specific data
#
#  (Credit to 'privateip' https://github.com/privateip/Ansible-Webinar-Mar2016
#   for examples.)

# If you are unfamiliar with regex, you should really take some time to review:
# http://www.tutorialspoint.com/python/python_reg_expressions.htm, or
# take a freely available Pythn course that introduces regex, like
#  https://www.coursera.org/specializations/python

  - hosts: my_switches
    gather_facts: no
    connection: local

    vars:
      connect_settings:
        username: cisco
        password: cisco
        authorize: yes
        auth_pass: cisco
        transport: cli

    tasks:
      # -------------------------------------------------------------
      - name: run 'show version'
        ios_command:
          host: "{{ inventory_hostname }}"
          commands:
            - show version
          provider: "{{ connect_settings }}"
        register: show_ver
      # -------------------------------------------------------------

      # Uncomment to see entire contects of 'show_ver' registered variable...
      #- name: dump 'show_ver'
      #  debug: var=show_ver

      # -------------------------------------------------------------
      - name: dump the 1st line of "show version" using bracket notation
        debug: var=show_ver["stdout_lines"][0][0]

      # Use the 'set_fact' module to save some data to a variable for later use.
      # http://docs.ansible.com/ansible/set_fact_module.html
      - name: set 'version' fact
        #set_fact: version="{{ show_ver.stdout[0] | regex_search( '[Vv]ersion\s+([a-zA-Z0-9_\.\(\)]+)', '\1' ) }}"
        set_fact: version="{{ show_ver.stdout[0] | regex_search( '[Vv]ersion\s+([\w\.\(\)]+)', '\1' ) }}"
      # The 'show version' in some IOS versions has a 'comma' after the version #,
      # e.g. 'Version 12.2(55)SE1, blah'.  The / [a-zA-Z0-9_\.\(\)]+ / ensures the
      # trailing 'comma' or 'space' are not matched while all other alphanumeric and
      # other characters 'period', 'parenthesis', 'underscore' that may be part of
      # an IOS version are matched.

      - name: dump 'version' fact
        debug: msg="Host {{ inventory_hostname }} is running IOS {{ version[0] }}"
      # -------------------------------------------------------------

      # -------------------------------------------------------------
      # Use 'findall' since in the case of stackable 3750/3850 switches each is
      # listed with serial#, etc. via "show version".
      - name: set 'models' fact
        set_fact: models="{{ show_ver.stdout[0] | regex_findall('Model [Nn]umber\s*\:\s*(WS\S+)\s*[Ss]ystem [Ss]erial [Nn]umber\s*\:\s*(\S+)') }}"
      # This works out nice as a list of lists is returned, each internal list
      # contains two items, ['Model', 'Serial#'], so for stack switchs like the
      # 3750/3850 there is a two item list for each switch in the stack, and the
      # the correct 'Serial#' is paired with the correct 'Model', e.g.
      #    "models": [
      #        ["WS-C3850-12X48U", "BNQ1949ND1N"],
      #        ["WS-C3850-48U", "FZU1947M0P7"]
      #     ]

      - name: dump 'models' list
        debug: var=models
      # -------------------------------------------------------------
