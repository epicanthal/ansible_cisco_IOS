---
# This playbook is based on Ansible 2.1, which is the initial version to
# include modules networking device, of which IOS is suppoted as a set of modules.
# https://docs.ansible.com/ansible/list_of_network_modules.html

  - hosts: switch.yourdomain.com       # put ip address or name here
    # Define some necessary variables for the playbooks
    # -------------------------------------------------------------
    # Ansible can't gather facts on systems that can't run Pyton
    # (i.e. there's no shell).
    # A nice explanation here in the "Why Ansible?" section:
    #     https://networklore.com/ansible-snmp-facts/
    # Cisco IOS switches/routers like most other
    # networking devices fall into this category.
    # http://docs.ansible.com/ansible/playbooks_variables.html#turning-off-facts
    # http://docs.ansible.com/ansible/snmp_facts_module.html
    gather_facts: no
    # As of my writing this, it appears that an "ios_facts" module will
    # be added to Ansible 2.2 (https://docs.ansible.com/ansible/ios_facts_module.html)
    # but that should be run as a task and 'gather_facts' should still be
    # set to 'no'.
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    # Ansible cannot run python scripts directly on Cisco IOS devices, so
    # set 'ansible_connection' to 'local' to force all Ansible scripts/modules
    # to run on the Ansible server (the control machine) itself rather than
    # on the remote IOS device.
    # A nice explanation here in the "Why Ansible?" section:
    #     https://networklore.com/ansible-snmp-facts/
    connection: local
    # Note:  This cannot be set in the 'provider' or 'task' level.  'provider'
    #        explained further below.
    # -------------------------------------------------------------

    # -------------------------------------------------------------
    # This is the local user you are logged-in as on your Ansible
    # server (the control machine).  e.g. I used 'ansible' as the login on
    # my Ansible VM Server, you may be using 'root'.
    # ansible_user: ansible
    # -------------------------------------------------------------


    # This is a 'provider' that will be referenced by each
    # ios_command or ios_config task
    # https://docs.ansible.com/ansible/intro_networking.html#connecting-to-networking-devices
    # https://docs.ansible.com/ansible/ios_config_module.html
    # https://docs.ansible.com/ansible/ios_command_module.html
    connect_settings:
       username: cisco
       password: cisco
       authorize: yes
       auth_pass: cisco
       transport: cli

    tasks:
    - name: run 'show version'
      ios_command:
           host: "{{ inventory_hostname }}"
           commands:
              - show version
              #- show interface status
              #- show switch (not a vaild command on a 3560)
           provider: "{{ connect_settings }}"
      register: show_ver

    - name: set version fact
      set_fact: version="{{ show_ver.stdout[0] | regex_search('Version (\\S+),', '\\1') | first }}"

    - name: set models fact
      set_fact: models="{{ show_ver.stdout[0] | regex_findall('Model number\s*\:\s*WS\\S+') }}"

    - name: output
      set_fact: models="{{ show_ver.stdout[0] | regex_findall('Model [Nn]umber\s*\:\s*(WS\S+)') }}"

#    - name: set models fact
#      set_fact: models="{{ show_ver.stdout[0] | regex_findall('Model [Nn]umber\s*\:\s*(WS\S+)') }}"

    - name: set serial numbers fact
      set_fact: serials="{{ show_ver.stdout[0] | regex_findall('System Serial Number\s*\:\s*(\S+)') }}"

    - name: output
      set_fact: models="{{ show_ver.stdout[0] | regex_findall('Model [Nn]umber\s*\:\s*(WS\S+)|System Serial Number\s*\:\s*(\S+)') }}"

    - name: output
      set_fact: models="{{ show_ver.stdout[0] | regex_findall('Model [Nn]umber\s*\:\s*(WS\S+)\s*[Ss]ystem [Ss]erial [Nn]umber\s*\:\s*(\S+)') }}"

    - name: show some stuff
      debug: msg="Version = {{ version }}"
      debug: var=models
#      debug: var=serials
      #debug: var=show_ver
      #debug: var=show_ver["stdout_lines"]
      #debug: var=show_ver["s:tdout_lines"][0][51]
